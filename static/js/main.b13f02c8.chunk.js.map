{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["MIN_PLAYERS","MAX_PLAYERS","PLAYERS_PER_COURT","MIN_COURTS","MAX_COURTS","App","players","setPlayers","useState","courtCount","setCourtCount","courts","setCourts","sittingOut","setSittingOut","gamesPlayed","setGamesPlayed","useEffect","newCourts","Array","from","length","_","index","id","React","createElement","className","onClick","resetCounts","map","player","sitOutCount","htmlFor","type","min","max","value","onChange","e","newCount","Math","parseInt","target","onSubmit","preventDefault","input","currentTarget","elements","namedItem","names","split","name","trim","filter","alert","newPlayers","placeholder","disabled","key","court","removePlayer","assignPlayers","sortedPlayers","sort","a","b","numToSitOut","sitOutCandidates","i","currentCount","group","p","includes","shuffledGroup","random","push","availablePlayers","courtsNeeded","floor","slice","updatedPlayers","find","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.b13f02c8.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\n\r\ninterface Player {\r\n  id: number;\r\n  name: string;\r\n  sitOutCount: number;\r\n}\r\n\r\ninterface Court {\r\n  id: number;\r\n  players: Player[];\r\n}\r\n\r\nconst MIN_PLAYERS = 4;\r\nconst MAX_PLAYERS = 30;\r\nconst PLAYERS_PER_COURT = 4;\r\nconst MIN_COURTS = 1;\r\nconst MAX_COURTS = 8;\r\n\r\nfunction App() {\r\n  const [players, setPlayers] = useState<Player[]>([]);\r\n  const [courtCount, setCourtCount] = useState(4);\r\n  const [courts, setCourts] = useState<Court[]>([]);\r\n  const [sittingOut, setSittingOut] = useState<Player[]>([]);\r\n  const [gamesPlayed, setGamesPlayed] = useState(0);\r\n\r\n  // Initialize or update courts when courtCount changes\r\n  useEffect(() => {\r\n    const newCourts: Court[] = Array.from({ length: courtCount }, (_, index) => ({\r\n      id: index + 1,\r\n      players: []\r\n    }));\r\n    setCourts(newCourts);\r\n  }, [courtCount]);\r\n\r\n  const handleCourtCountChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    const newCount = Math.min(Math.max(parseInt(e.target.value) || MIN_COURTS, MIN_COURTS), MAX_COURTS);\r\n    setCourtCount(newCount);\r\n  };\r\n\r\n  const addPlayer = (name: string) => {\r\n    if (players.length >= MAX_PLAYERS) {\r\n      alert(`Maximum number of players (${MAX_PLAYERS}) reached!`);\r\n      return;\r\n    }\r\n    const newPlayer: Player = {\r\n      id: players.length + 1,\r\n      name: name.trim(),\r\n      sitOutCount: 0\r\n    };\r\n    setPlayers([...players, newPlayer]);\r\n  };\r\n\r\n  const removePlayer = (id: number) => {\r\n    setPlayers(players.filter(player => player.id !== id));\r\n    setCourts(courts.map(court => ({\r\n      ...court,\r\n      players: court.players.filter(player => player.id !== id)\r\n    })));\r\n    setSittingOut(sittingOut.filter(player => player.id !== id));\r\n  };\r\n\r\n  const resetCounts = () => {\r\n    setGamesPlayed(0);\r\n    setPlayers(players.map(player => ({\r\n      ...player,\r\n      sitOutCount: 0\r\n    })));\r\n  };\r\n\r\n  const assignPlayers = () => {\r\n    if (players.length < MIN_PLAYERS) {\r\n      alert(`Please add at least ${MIN_PLAYERS} players before assigning courts.`);\r\n      return;\r\n    }\r\n\r\n    // Sort players by sitOutCount (ascending)\r\n    const sortedPlayers = [...players].sort((a, b) => a.sitOutCount - b.sitOutCount);\r\n    const numToSitOut = players.length % PLAYERS_PER_COURT;\r\n    let sitOutCandidates: Player[] = [];\r\n    let sitOutCount = 0;\r\n    let i = 0;\r\n    // Collect enough players from the lowest sitOutCount groups\r\n    while (sitOutCandidates.length < numToSitOut && i < sortedPlayers.length) {\r\n      const currentCount = sortedPlayers[i].sitOutCount;\r\n      const group = sortedPlayers.filter(p => p.sitOutCount === currentCount && !sitOutCandidates.includes(p));\r\n      // Shuffle the group\r\n      const shuffledGroup = [...group].sort(() => Math.random() - 0.5);\r\n      for (const p of shuffledGroup) {\r\n        if (sitOutCandidates.length < numToSitOut) {\r\n          sitOutCandidates.push(p);\r\n        }\r\n      }\r\n      i += group.length;\r\n    }\r\n    // Remove sitOutCandidates from the list to get available players\r\n    const availablePlayers = sortedPlayers.filter(p => !sitOutCandidates.includes(p)).sort(() => Math.random() - 0.5);\r\n\r\n    // Reset all courts first\r\n    const newCourts: Court[] = courts.map(court => ({ ...court, players: [] }));\r\n    const courtsNeeded = Math.floor(availablePlayers.length / PLAYERS_PER_COURT);\r\n    for (let i = 0; i < courtsNeeded; i++) {\r\n      newCourts[i] = {\r\n        ...newCourts[i],\r\n        players: availablePlayers.slice(i * PLAYERS_PER_COURT, (i + 1) * PLAYERS_PER_COURT)\r\n      };\r\n    }\r\n\r\n    // Update sit-out counts for players who are sitting out\r\n    const updatedPlayers = players.map(player => {\r\n      if (sitOutCandidates.find(p => p.id === player.id)) {\r\n        return { ...player, sitOutCount: player.sitOutCount + 1 };\r\n      }\r\n      return player;\r\n    });\r\n\r\n    setCourts(newCourts);\r\n    setSittingOut(sitOutCandidates);\r\n    setPlayers(updatedPlayers);\r\n    setGamesPlayed(gamesPlayed + 1);\r\n  };\r\n\r\n  const handleAddPlayer = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    const input = e.currentTarget.elements.namedItem('playerName') as HTMLInputElement;\r\n    const names = input.value.split(',').map(name => name.trim()).filter(name => name !== '');\r\n    \r\n    // Check if adding all names would exceed the maximum\r\n    if (players.length + names.length > MAX_PLAYERS) {\r\n      alert(`Cannot add ${names.length} players. Only ${MAX_PLAYERS - players.length} spots remaining.`);\r\n      return;\r\n    }\r\n\r\n    // Create all new players at once\r\n    const newPlayers = names.map((name, index) => ({\r\n      id: players.length + index + 1,\r\n      name: name,\r\n      sitOutCount: 0\r\n    }));\r\n\r\n    // Add all players in a single state update\r\n    setPlayers([...players, ...newPlayers]);\r\n    input.value = '';\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"app-header\">\r\n        <h1>Kitchen Sync</h1>\r\n        <p className=\"tagline\">The pickleball court organizer with FairPlay Technology</p>\r\n      </div>\r\n      \r\n      <div className=\"game-stats\">\r\n        <div className=\"games-played\">\r\n          <h3>Games Played: {gamesPlayed}</h3>\r\n          <button onClick={resetCounts} className=\"reset-button\">\r\n            Reset Counts\r\n          </button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"court-count-selector\">\r\n        <label htmlFor=\"courtCount\">Number of Available Courts:</label>\r\n        <input\r\n          type=\"number\"\r\n          id=\"courtCount\"\r\n          min={MIN_COURTS}\r\n          max={MAX_COURTS}\r\n          value={courtCount}\r\n          onChange={handleCourtCountChange}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"player-input\">\r\n        <form onSubmit={handleAddPlayer}>\r\n          <input\r\n            type=\"text\"\r\n            name=\"playerName\"\r\n            placeholder=\"Enter player names (comma-separated)\"\r\n            disabled={players.length >= MAX_PLAYERS}\r\n          />\r\n          <button type=\"submit\" disabled={players.length >= MAX_PLAYERS}>\r\n            Add Player ({players.length}/{MAX_PLAYERS})\r\n          </button>\r\n        </form>\r\n      </div>\r\n\r\n      <div className=\"player-list\">\r\n        <h2>Players:</h2>\r\n        <ul>\r\n          {players.map((player) => (\r\n            <li key={player.id}>\r\n              <div className=\"player-info\">\r\n                <span>{player.name}</span>\r\n                <span className=\"sit-out-count\">Sat out: {player.sitOutCount}</span>\r\n              </div>\r\n              <button \r\n                onClick={() => removePlayer(player.id)}\r\n                className=\"remove-button\"\r\n              >\r\n                ✕\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n\r\n      <button \r\n        className=\"assign-button\"\r\n        onClick={assignPlayers}\r\n        disabled={players.length < MIN_PLAYERS}\r\n      >\r\n        Assign Players\r\n      </button>\r\n\r\n      <div className=\"courts-container\">\r\n        {courts.map((court) => (\r\n          <div key={court.id} className=\"court\">\r\n            <h3>Court {court.id}</h3>\r\n            <div className=\"court-players\">\r\n              <div className=\"team\">\r\n                {court.players.slice(0, 2).map((player) => (\r\n                  <div key={player.id} className=\"player\">{player.name}</div>\r\n                ))}\r\n              </div>\r\n              <div className=\"versus\">vs</div>\r\n              <div className=\"team\">\r\n                {court.players.slice(2, 4).map((player) => (\r\n                  <div key={player.id} className=\"player\">{player.name}</div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      <div className=\"sitting-out\">\r\n        <h3>Sitting Out:</h3>\r\n        <ul>\r\n          {sittingOut.map((player) => (\r\n            <li key={player.id}>\r\n              {player.name}\r\n              <span className=\"sit-out-count\">({player.sitOutCount})</span>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App; ","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}